import scrapy
import json

class UniversitySpider(scrapy.Spider):
    name = 'university_spider'
    
    # Start URL to scrape the main page or the list of universities
    start_urls = ['https://pu.edu.pk/']
    
    def parse(self, response):
        # Extracting university data
        university_data = {
            "university_title": response.css('title::text').get().strip(),
            "main_link": response.url,
            "social_links": {
                "instagram": response.xpath('//*[@id="header"]/div[2]/div[1]/ul/li[4]/a/@href').get(),
                "facebook": response.xpath('//*[@id="header"]/div[2]/div[1]/ul/li[2]/a/@href').get(),
                "twitter": response.xpath('//*[@id="header"]/div[2]/div[1]/ul/li[3]/a/@href').get(),
            },
            "ranking": 5,  # You can replace this with dynamic scraping if required
            "contact_details": {
                "info_email": "info@pu.edu.pk",  # Replace with dynamic scraping if available
                "call": "+92 42 9923 0000",  # Replace with dynamic scraping if available
            },
            "introduction": "Punjab University is a leading university in Pakistan.",  # Replace with dynamic scraping if available
            "programs": {
                "software_engineering": self.parse_program(response, "software_engineering"),
                "computer_science": self.parse_program(response, "computer_science"),
                "data_science": self.parse_program(response, "data_science"),
            },
            "campuses": self.parse_campuses(response),
        }
        
        # Output the scraped data to a JSON file
        with open("university_data.json", "w") as f:
            json.dump([university_data], f, indent=4)

    def parse_program(self, response, program_name):
        # Hardcoded or dynamically extracted details for each program
        if program_name == "software_engineering":
            return {
                "program_title": "Software Engineering",  # Hardcoded
                "program_description": "Description of Software Engineering",  # Hardcoded
                "program_duration": "4 years",  # Hardcoded
                "credit_hours": "130",  # Hardcoded
                "fee": "1000 USD/year",  # Hardcoded
                "merit": "High",  # Hardcoded
                "teaching_system": "Hybrid",  # Hardcoded
                "session_begin": "Fall 2024",  # Hardcoded
                "admission_criteria": [
                    {"s.no": 1, "criteria": "Must have completed high school with a minimum of 75%."},
                    {"s.no": 2, "criteria": "Pass an entrance exam."}
                ],
                "course_outline": [
                    {"course_name": "Intro to Programming", "semester": 1, "credit_hours": 3},
                    {"course_name": "Data Structures", "semester": 2, "credit_hours": 3},
                    {"course_name": "Algorithms", "semester": 3, "credit_hours": 3}
                ]
            }
        
        elif program_name == "computer_science":
            return {
                "program_title": "Computer Science",  # Hardcoded
                "program_description": "Description of Computer Science",  # Hardcoded
                "program_duration": "4 years",  # Hardcoded
                "credit_hours": "120",  # Hardcoded
                "fee": "900 USD/year",  # Hardcoded
                "merit": "Medium",  # Hardcoded
                "teaching_system": "Online",  # Hardcoded
                "session_begin": "Spring 2024",  # Hardcoded
                "admission_criteria": [
                    {"s.no": 1, "criteria": "Must have completed high school."},
                    {"s.no": 2, "criteria": "Pass an online interview."}
                ],
                "course_outline": [
                    {"course_name": "Data Structures", "semester": 1, "credit_hours": 3},
                    {"course_name": "Discrete Mathematics", "semester": 2, "credit_hours": 3},
                    {"course_name": "Database Systems", "semester": 3, "credit_hours": 3}
                ]
            }
        
        elif program_name == "data_science":
            return {
                "program_title": "Data Science",  # Hardcoded
                "program_description": "Description of Data Science",  # Hardcoded
                "program_duration": "3 years",  # Hardcoded
                "credit_hours": "120",  # Hardcoded
                "fee": "1100 USD/year",  # Hardcoded
                "merit": "Medium",  # Hardcoded
                "teaching_system": "Hybrid",  # Hardcoded
                "session_begin": "Fall 2024",  # Hardcoded
                "admission_criteria": [
                    {"s.no": 1, "criteria": "Bachelor's degree in any field."},
                    {"s.no": 2, "criteria": "Pass a math proficiency test."}
                ],
                "course_outline": [
                    {"course_name": "Intro to Data Science", "semester": 1, "credit_hours": 3},
                    {"course_name": "Machine Learning", "semester": 2, "credit_hours": 3},
                    {"course_name": "Big Data", "semester": 3, "credit_hours": 3}
                ]
            }
    
    def parse_campuses(self, response):
        # Parse campuses (update with appropriate xpaths for each campus)
        campuses = {
            "new_campus": response.xpath('//table//tr[2]/td[1]/a/@href').get(),
            "old_campus": response.xpath('//table//tr[2]/td[3]/a/@href').get(),
            "gujranwala_campus": response.xpath('//table//tr[3]/td[1]/a/@href').get(),
            "khanspur_campus": response.xpath('//table//tr[3]/td[3]/a/@href').get(),
            "jhelum_campus": response.xpath('//table//tr[4]/td[1]/div/a/@href').get(),
            "pothohar_campus": response.xpath('//table/tbody/tr[4]/td[3]/div/a/@href').get()
        }
        return campuses
